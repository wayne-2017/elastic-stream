namespace header;

// Use HTTP status codes where possible: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
// 5xx is not used as we have two kinds of servers: placement driver and range server. Instead, use
// 15xx for placement driver errors and 25xx for range server errors.
enum ErrorCode : int16 {
    ERROR_CODE_UNSPECIFIED = 0,

    // Error when encoding protocol structs into buffers.
    ENCODE = 1,

    // Error when decoding buffers into protocol structs
    DECODE = 2,

    UNEXPECTED = 3,

    // 12xx means success or partial success.
    OK = 1200,
    // Requested offset = next_offset. Note that this code only applies to open ranges.
    NO_NEW_RECORD = 1204,

    // 14xx for client errors
    BAD_REQUEST = 1400,
    UNAUTHORIZED = 1401,
    PAYMENT_REQUIRED = 1402,
    FORBIDDEN = 1403,
    NOT_FOUND = 1404,
    METHOD_NOT_ALLOWED = 1405,
    PRECONDITION_FAILED = 1412,
    PAYLOAD_TOO_LARGE = 1413,
    TOO_MANY_REQUESTS = 1429,
    HEADER_FIELDS_TOO_LARGE = 1431,
    UNAVAILABLE_FOR_LEGAL_REASONS = 1451,

    // Invalid request for a sealed range, such as appending.
    RANGE_ALREADY_SEALED = 1460,
    // For an open range, the requested offset > next_offset.
    OFFSET_OVERFLOW = 1461,
    // Requested range not found.
    RANGE_NOT_FOUND = 1462,
    // For a sealed range, the requested offset is out of range bounds. For an open range, the requested offset < start_offset.
    OFFSET_OUT_OF_RANGE_BOUNDS = 1463,
    // The offset associated with the append request is already committed.
    APPEND_TO_COMMITTED_OFFSET = 1464,
    // The append request is already on the fly, which means there is a pending append request with the same offset.
    APPEND_TO_PENDING_OFFSET = 1465,
    // The append request is out of order, which means the associated offset is beyond the next append offset.
    APPEND_TO_OVERTAKEN_OFFSET = 1466,
    // Try to create a new range when the last range in the stream is not sealed.
    CREATE_RANGE_BEFORE_SEAL = 1470,
    // Try to seal a range with an epoch which is smaller than the current range's epoch.
    // or
    // Try to create a new range with an epoch that is smaller than the previous range's epoch.
    EXPIRED_RANGE_EPOCH = 1471,
    // Cannot find the object for the request.
    OBJECT_NOT_FOUND = 1472,
    // Cannot find match records in objects.
    NO_MATCH_RECORDS_IN_OBJECT = 1473,
    // Object operator is uninitialized.
    OBJECT_OPERATOR_UNINITIALIZED = 1474,
    // The object data is illegal, parse error.
    OBJECT_PARSE_ERROR = 1475,
    // Request object store error.
    REQUEST_OBJECT_STORE_ERROR = 1476,
    RECORDS_BLOCKS_NOT_CONTINUOUS = 1477,

    STREAM_ALREADY_CLOSED = 1478,
    REPLICA_NOT_ENOUGH = 1479,
    RECORDS_PARSE_ERROR = 1480,
    ALL_REPLICAS_FETCH_FAILED = 1481,


    RPC_TIMEOUT = 1482,
    BAD_ADDRESS = 1483,
    CONNECT_REFUSED = 1484,
    CONNECT_FAIL = 1485,
    CONNECT_TIMEOUT = 1486,
    CONNECT_DISABLE_NAGLE_FAIL = 1487,
    STREAM_NOT_EXIST = 1488,
    EXPIRED_STREAM_EPOCH = 1489,

    // Server understands the intended operation but it does not support that.
    UNSUPPORTED_OPERATION = 1498,

    // The operation is unknown.
    UNKNOWN_OPERATION = 1499,

    // 15xx is reserved for placement driver errors
    // In case placement driver encounters an internal error, normally, this implies
    // that a design or implementation bug is triggered and should be fixed.
    PD_INTERNAL_SERVER_ERROR = 1500,

    // Feature not implemented yet.
    PD_NOT_IMPLEMENTED = 1501,

    // When creating a new stream or sealing a mutable range, placement drivers need to create
    // a new replica-set of mutable range, which requires at least replica number of survival
    // range servers. If this requirement is not met, use this error code to signal the client.
    PD_NO_AVAILABLE_RS = 1502,

    // Placement driver nodes are running RAFT consensus algorithm, write operations should go to
    // leader nodes. Otherwise, use this code to signal the client to redirect future requests.
    PD_NOT_LEADER = 1503,

    // When listing or watching resources, the resource version is too old and the PD server has compacted it.
    PD_COMPACTED = 1504,

    // 25xx is reserved for range server errors
    RS_INTERNAL_SERVER_ERROR = 2500,
    RS_NOT_IMPLEMENTED = 2501,
    RS_DATA_CORRUPTED = 2502,

    // Failed to create range on range server using the given metadata.
    RS_CREATE_RANGE = 2503,

    // Failed to seal range on range server
    RS_SEAL_RANGE = 2504,
}

// Flag variants shared by multiple opcodes
enum CommonFlags : byte {
    // Mark type of the frame is request.
    REQUEST = 0,

    // Mark frame is a response to a prior request.
    RESPONSE = 1,

    // Mark end-of-stream
    END_OF_STREAM = 2,

    // Mark the frame is carrying a system error. For example, if decoding header fails, server would
    // flag system error in response.
    SYSTEM_ERROR = 4,
}


// Flag variants for GOAWAY frame
enum GoAwayFlags : byte {
    // The underlynig connection/stream has been idle for the configured period of time. An endpoint, who
    // detects this idleness, is going to close the idle connection/stream.
    CONNECTION_IDLE = 0,

    // Server is going to perform maintenance shortly. No new connection/stream will be served for current
    // epoch. Servers will broadcast GOAWAY frames to existing streams/connections, instructing clients to
    // conduct fail-over as soon as possible.
    SERVER_MAINTENANCE = 1,
}

enum OperationCode : short {
    // 0x0000 is reserved for unknown
    UNKNOWN = 0x0000,

    // 0x0000 ~ 0x0FFF is reserved for system

    // Measure a minimal round-trip time from the sender.
    PING = 0x0001,
    // Initiate a shutdown of a connection or signal serious error conditions.
    GOAWAY = 0x0002,
    // To keep clients alive through periodic heartbeat frames.
    HEARTBEAT = 0x0003,

    // Allocate a unique ID from placement drivers.
    ALLOCATE_ID = 0x0004,

    // 0x1000 ~ 0x1FFF is reserved for data communication

    // Append records to the range server.
    APPEND = 0x1001,
    // Fetch records from the range server.
    FETCH = 0x1002,

    // 0x2000 ~ 0x2FFF is reserved for range management

    // List ranges from the PD of a batch of streams.
    LIST_RANGE = 0x2001,
    // Request seal ranges of a batch of streams.
    // The PD will provide the `SEAL_AND_NEW` semantic while Range Server only provide the `SEAL` semantic.
    SEAL_RANGE = 0x2002,
    // Syncs newly writable ranges to a range server to accelerate the availability of a newly created writable range.
    SYNC_RANGE = 0x2003,

    // Create a new range for a stream.
    CREATE_RANGE = 0x2004,

    // 0x3000 ~ 0x3FFF is reserved for stream management

    // Create a batch of streams.
    CREATE_STREAM = 0x3001,
    // Delete a batch of streams.
    DELETE_STREAM = 0x3002,
    // Update a batch of streams.
    UPDATE_STREAM = 0x3003,
    // Describe the details of a batch of streams.
    DESCRIBE_STREAM = 0x3004,
    // Trim the min offset of a batch of streams.
    TRIM_STREAM = 0x3005,
    // Update the epoch of a stream to fence the stream.
    UPDATE_STREAM_EPOCH = 0x3006,

    // 0x4000 ~ 0x4FFF is reserved for observability

    // Range Server reports metrics to the PD.
    REPORT_METRICS = 0x4001,

    // Describe placement driver cluster membership.
    DESCRIBE_PLACEMENT_DRIVER = 0x4002,

    // Range Server reports replica progress to the PD
    REPORT_REPLICA_PROGRESS = 0x4003,

    // 0x5000 ~ 0x5FFF is reserved for object management

    // Commit an object after all its data has been written to the object storage.
    COMMIT_OBJECT = 0x5001,

    // 0x6000 ~ 0x6FFF is reserved for resource management

    // List resources from the PD.
    LIST_RESOURCE = 0x6001,

    // Watch resources with the given revision from the PD.
    WATCH_RESOURCE = 0x6002,
}

// The Status type defines a logical error model.
// Each `Status` message contains three pieces of data: error code, error message, and error detail.
table Status {
    // The top-level error code, or 0 if there was no error.
    code: ErrorCode (id: 0);

    // The error message, or omitted if there was no error.
    message: string (id: 1);

    // Additional information about the error, if any.
    // Its format depends on the specific `ErrorCode`.
    detail: [ubyte] (id: 2);
}

// The Placement Driver information.
// It will be set in `Status.detail` if the `Status.code` is `PD_NOT_LEADER`.
table PlacementDriverCluster {
    nodes: [PlacementDriverNode] (id: 0, required);
}

// A node in the Placement Driver.
table PlacementDriverNode {
    // The name of the PD node.
    name: string (id: 0, required);

    // The advertise address of the PD node, for client traffic from outside.
    // The schema of the address is `host:port`, while host supports both domain name and IPv4/IPv6 address.
    advertise_addr: string (id: 1, required);

    is_leader: bool (id: 2);
}

// The system error is used to return the error code and error message if the system error flag of sbp is set.
table SystemError {
    status: Status (id: 0, required);
}

enum ClientRole : byte {
    CLIENT_ROLE_UNSPECIFIED = 0,
    CLIENT_ROLE_PD = 1,
    CLIENT_ROLE_RANGE_SERVER = 2,
    CLIENT_ROLE_FRONTEND = 3,
}

// The heartbeat is used to keep the connection alive.
table HeartbeatRequest {
    // The unique id of the client.
    client_id: string (id: 0);

    // The role of the client. The client role is used to determine the type of the client.
    client_role: ClientRole (id: 1);

    // Optional, the server information of the range server. Empty if the client is an SDK client.
    range_server: RangeServer (id: 2);
}

table HeartbeatResponse {
    client_id: string (id: 0);

    client_role: ClientRole (id: 1);

    range_server: RangeServer (id: 2);

    status: Status (id: 3, required);
}

// Request placement driver to allocate a unique ID.
table IdAllocationRequest {
    timeout_ms: int32 (id: 0);

    host: string (id: 1, required);
}

// Unique ID allocation response
table IdAllocationResponse {
    status: Status (id: 0, required);

    // Allocated server-id
    id: int32 (id: 1);
}

// The append request is used to append records to the range server.
table AppendRequest {
    // The timeout to await a response in milliseconds.
    timeout_ms: int32 (id: 0);

    // Other fields are serialized in the payload.
    // Layout of the request payload
    // +-------------------+-------------------+-------------------+-------------------+
    // |  AppendEntry 1    |  AppendEntry 2    |  AppendEntry 3    |        ...        |
    // +-------------------+-------------------+-------------------+-------------------+
    //
    // Layout of AppendEntry
    // +-------------------+-------------------+-------------------+------------------------------------------+
    // |  Magic Code(1B)   |  Meta Len(4B)     |       Meta        |  Payload Len(4B) | Record Batch Payload  |
    // +-------------------+-------------------+-------------------+------------------------------------------+
}

table AppendResponse {
    // Status for overall RPC.
    status: Status (id: 0, required);

    // A batch of append responses.
    entries: [AppendResultEntry] (id: 1);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 2);
}

table AppendResultEntry {
    // Status for the AppendEntry
    status: Status (id: 0, required);

    // The timestamp returned by the range server server after appending the records.
    timestamp_ms: int64 (id: 1);
}

// The fetch request is used to fetch records from the range server.
// This frame supports fetching data from multiple streams in one frame,
// and the response could be split into multiple frames then returned in a streaming way.
table FetchRequest {
    // The maximum time in milliseconds to wait for the response.
    max_wait_ms: int32 (id: 0);

    // The stream range to fetch.
    range: Range (id: 1, required);

    // The offset to fetch from.
    offset: int64 (id: 2);

    // Records within `[range.start_offset, limit)` are confirmed by replication
    // algorithm. It is safe to deliver them to the downstream.
    limit: int64 (id: 3);

    // The minimum bytes to accumulate before returning a response.
    min_bytes: int32 = -1 (id: 4);

    // The maximum number of bytes to fetch.
    max_bytes: int32 = -1 (id: 5);
}

table FetchResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // When the range server does not have the data locally, it will return an object metadata list that corresponds to the fetched range.
    object_metadata_list: [ObjectMetadata] (id: 2);
}

table ObjectMetadata {
    key: string (id: 0, required);

    start_offset: int64 = -1 (id: 1);

    end_offset_delta: int32 = -1 (id: 2);

    data_len: int32 = -1 (id: 3);

    sparse_index: [ubyte] (id: 4);
}

// Used to fetch the ranges from a specific range server or a specific stream list.
// Regard this table as a union type.
// Always set one of the fields.
table ListRangeCriteria {
    // If non-negative, placement drivers are expected to filter ranges assigned to the specified server.
    server_id: int32 = -1 (id: 0);

    // The stream id to list the ranges.
    stream_id: int64 = -1 (id: 1);
}

// State of the range server
enum RangeServerState : byte {
    RANGE_SERVER_STATE_UNSPECIFIED = 0,
    RANGE_SERVER_STATE_READ_ONLY = 1,
    RANGE_SERVER_STATE_READ_WRITE = 2,
    RANGE_SERVER_STATE_OFFLINE = 3,
}

table RangeServer {
    // The server id of the range server.
    server_id: int32 = -1 (id: 0);

    // The advertise address of the range server, for client traffic from outside.
    // The schema of the address is `host:port`, while host supports both domain name and IPv4/IPv6 address.
    advertise_addr: string (id: 1, required);

    // State of the range server: `ReadOnly` or `ReadWrite`.
    state: RangeServerState(id: 2);
}

// The list streams request is used to list the ranges of a batch of streams.
// Or it could list the ranges of all the streams in a specific range server.
table ListRangeRequest {
    timeout_ms: int32 (id: 0);

    // The range criteria could be a range server or a list of streams.
    criteria: ListRangeCriteria (id: 1, required);
}

table ListRangeResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // The list of ranges.
    ranges: [Range] (id: 2, required);
}

table OffloadOwner {
    // The server id of the owner.
    server_id: int32 = -1 (id: 0);

    // The epoch of the owner.
    epoch: int16 = -1 (id: 1);
}

table Range {
    // The id of the stream
    stream_id: int64 = -1 (id: 0);

    // At the epoch when the range is created. Valid values are non-negative.
    epoch: int64 = -1 (id: 1);

    // The index of the range in the stream.
    index: int32 = -1 (id: 2);

    // The start offset of the range. Offset is 0-based index and follows left-boundary-inclusive and right-boundary-exclusive.
    start: int64 = -1 (id: 3);

    // The end offset of the range.
    // -1 if the range is mutable. If the range is sealed, end_offset would be non-negative and `end_offset` is exclusive.
    //
    // For example, range `[0, -1)` means that it is still mutable and clients may append additional records to it;
    // range `[0, 100)` means it is already sealed and read-only, records indexed 0 to 99 can be retrieved from this range;
    // we may have empty, droppable sealed ranges with the form `[N, N)` and placement driver would delete them without hesitation,
    // as a result, clients should NOT cache these empty ones.
    end: int64 = -1 (id: 4);

    // The collection of range-server that host this range.
    servers: [RangeServer] (id: 5);

    // The range replica expected count.
    replica_count: int8 = -1 (id: 6);

    // The range replica ack count, only success ack > ack, then the write is success.
    ack_count: int8 = -1 (id: 7);

    // The owner of the range which offloads the data to the object storage.
    offload_owner: OffloadOwner (id: 8);
}

table CreateRangeRequest {
    timeout_ms: int32 (id: 0);

    range: Range (id: 1, required);
}

table CreateRangeResponse {
    status: Status (id: 0, required);

    range: Range (id: 1);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 2);
}

// Seal target kinds.
//
// Replication layer SDK performs two kinds of seals: seal-range-server and seal-placement-driver.
// The former one renders ranges on range-server immutable and blocks further writes. In the scenario of chasing
// write, replication SDK acknowledges application if MinCopy out of MaxCopy replicas are successfully written in range servers
// within the configured amount of tolerance, where 2 * MinCopy > MaxCopy. Otherwise, replication SDK initiates seal actions
// of the range towards range-servers. Range servers, on receipt of replication SDK seal, immediately changes range as immutable and
// returns currently confirmed offset and fails all inflight and future writes to current range.
//
// After receiving at least MinCopy of range-server seal responses, replication layer SDK is safe to seal the range in placement driver
// and potentially create a new range, replicas of which reside on a different set of range servers. This achieves fast fault toleration
// as well as overall low write latency.
enum SealKind : byte {
    UNSPECIFIED = 0,
    RANGE_SERVER = 1,
    PLACEMENT_DRIVER = 2,
}

table SealRangeRequest {
    timeout_ms: int32 (id: 0);

    kind: SealKind    (id: 1);

    // If the seal-type is placement-driver, end is the final upper boundary of the range being sealed.
    range: Range      (id: 2, required);
}

table SealRangeResponse {
    status: Status (id: 0, required);

    // Both the PD and the range server will handle the seal ranges request.
    range: Range (id: 1);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 2);
}

table Stream {
    // The id of the stream
    // Omitted if the stream is not created.
    stream_id: int64 = -1 (id: 0);

    // The number of replica of the stream.
    replica: int8 (id: 1);

    // The number of ack of the stream.
    ack_count: int8 (id: 2);

    // The time to live of records in the stream in milliseconds.
    retention_period_ms: int64 (id: 3);

    start_offset: int64 (id: 4);
}

// The create stream request is used to create a batch of streams.
// This frame with batch ability is very useful for importing metadata from other systems.
table CreateStreamRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // A batch of streams to create.
    stream: Stream (id: 1, required);
}

table CreateStreamResponse {
    // Flag status of the RPC.
    status: Status (id: 0, required);

    // The created stream
    stream: Stream (id: 1);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 2);
}

// The delete streams request is used to delete a batch of streams to PD or range server.
// The PD will delete the stream metadata as well as the range info, while the range server only marks the stream as deleted to reject the new write requests timely.
table DeleteStreamRequest {

    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The id of the stream to delete.
    stream_id: int64 = -1 (id: 1);
}

table DeleteStreamResponse {
    status: Status (id: 0, required);

    // The deleted stream, or omitted if the stream is not deleted.
    stream: Stream (id: 1);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 2);
}

table UpdateStreamRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The streams to update.
    stream: Stream (id: 1);
}

table UpdateStreamResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // The updated stream
    stream: Stream (id: 2);
}

table DescribeStreamRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The ids of the streams to describe.
    stream_id: int64 (id: 1);
}

table DescribeStreamResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // The stream, returned by the describe streams request.
    stream: Stream (id: 2);
}

// The trim streams request is used to trim a batch of streams to PD.
// The range server stores the records in the stream in a log structure,
// and the records are appended to the end of the log.
// Consider the length of disk is limited, the range server will delete the records to recycling the disk space.
// Once the deletion occurs, some ranges should be trimmed to avoid the clients to read the deleted records.

// The range server will send the TRIM_STREAMS frame to the PD to trim the stream with a trim offset.
// The PD will delete the ranges whose end offset is less than the trim offset
// and shrink the ranges whose start offset is less than the trim offset.
table TrimStreamRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The id of the stream
    stream_id: int64 = -1 (id: 1);

    // The current minimum offset of the stream.
    // All the records before this offset have be deleted.
    min_offset: int64 (id: 2);
}

table TrimStreamsResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // The trimmed stream
    stream: Stream (id: 2);

    // The smallest range of the stream after a trim operation.
    range: Range (id: 3);
}


table ReportMetricsRequest {
    range_server: RangeServer (id: 0);

    metrics: RangeServerMetrics (id: 1);
}

table RangeServerMetrics {
    disk_in_rate: int64 (id: 0);
    disk_out_rate: int64 (id: 1);
    disk_free_space: int64 (id: 2);
    disk_unindexed_data_size: int64 (id: 3);
    memory_used: int64 (id: 4);
    uring_task_rate: int16 (id: 5);
    uring_inflight_task_cnt: int16 (id: 6);
    uring_pending_task_cnt: int32 (id: 7);
    uring_task_avg_latency: int16 (id: 8);
    network_append_rate: int16 (id: 9);
    network_fetch_rate: int16 (id: 10);
    network_failed_append_rate: int16 (id: 11);
    network_failed_fetch_rate: int16 (id: 12);
    network_append_avg_latency: int16 (id: 13);
    network_fetch_avg_latency: int16 (id: 14);
    range_missing_replica_cnt: int16 (id: 15);
    range_active_cnt: int16 (id: 16);
}

table ReportMetricsResponse {
    range_server: RangeServer (id: 0);

    status: Status (id: 1, required);
}

table DescribePlacementDriverClusterRequest {
    // Range server that needs to know PD membership
    range_server: RangeServer (id: 0, required);

    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 1);
}

table DescribePlacementDriverClusterResponse {
    status: Status (id: 0, required);

    cluster: PlacementDriverCluster (id: 1, required);
}

table Obj {
    // The id of the stream.
    stream_id: int64 = -1 (id: 0);

    // The index of the range in the stream.
    range_index: int32 = -1 (id: 1);

    // The epoch of the range server that offloads the object.
    epoch: int16 = -1 (id: 2);

    // The start offset of the object in the range.
    start_offset: int64 = -1 (id: 3);

    // The difference between the start offset and the end offset.
    end_offset_delta: int32 = -1 (id: 4);

    // The length of the object in bytes.
    data_len: int32 = -1 (id: 5);

    // The sparse index of the object.
    sparse_index: [ubyte] (id: 6);
}

table CommitObjectRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The object to commit.
    object: Obj (id: 1);
}

table CommitObjectResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);
}

enum ResourceType: byte {
    UNKNOWN = 0,
    RANGE_SERVER = 1,
    STREAM = 2,
    RANGE = 3,
    OBJECT = 4,
}

// As vectors of unions are not yet supported in rust, we use a struct to wrap the union like
// `union Resource { RangeServer, Stream, Range, Obj }`.
table Resource {
    type: ResourceType (id: 0);

    range_server: RangeServer (id: 1);
    stream: Stream (id: 2);
    range: Range (id: 3);
    object: Obj (id: 4);
}

enum EventType: byte {
    UNKNOWN = 0,
    ADDED = 1,
    MODIFIED = 2,
    DELETED = 3,
}

table ResourceEvent {
    type: EventType (id: 0);
    resource: Resource (id: 1, required);
}

table ListResourceRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The type of the resource.
    resource_type: [ResourceType] (id: 1, required);

    // The maximum number of resources to return.
    // If not set, the server will return all the resources.
    // If more resources are available, the server will return a continue token.
    // NOTE: The server may return fewer than the requested number of resources due to resource limits, and clients
    // should ONLY use the presence of the continue field to determine whether more results are available.
    limit: int32 (id: 2);

    // The token to continue listing resources from a previous request.
    // Since this value is determined by the server, clients may only use the continue token from a previous request.
    continuation: [ubyte] (id: 3);
}

table ListResourceResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // The list of the resources.
    resources: [Resource] (id: 2, required);

    // The resource version when the request is processed.
    resource_version: int64 (id: 3);

    // The token to continue listing resources from a previous request.
    // It may be set if clients set a limit and the server has more resources available.
    continuation: [ubyte] (id: 4);
}

table WatchResourceRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // The type of the resource.
    resource_type: [ResourceType] (id: 1, required);

    // The resource version to watch. All changes with a version greater than the given version will be returned.
    resource_version: int64 (id: 2);
}

table WatchResourceResponse {
    status: Status (id: 0, required);

    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: int32 (id: 1);

    // The list of the events.
    events: [ResourceEvent] (id: 2, required);

    // The resource version when the request is processed.
    resource_version: int64 (id: 3);
}

table KeyValue {
    // key is the key in bytes. An empty key is not allowed.
    key: [ubyte] (id: 0);

    // value is the value held by the key, in bytes.
    value: [ubyte] (id: 1);
}

table RangeRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // key is the first key for the range. If range_end is not given, the request only looks up key.
    key: [ubyte] (id: 1);

    // range_end is the upper bound on the requested range [key, range_end).
    // If range_end is '\0', the range is all keys >= key.
    // If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
    // then the range request gets all keys prefixed with key.
    // If both key and range_end are '\0', then the range request returns all keys.
    range_end: [ubyte] (id: 2);

    // limit is a limit on the number of keys returned for the request. When limit is set to 0,
    // it is treated as no limit.
    limit: int64 (id: 3);
}

table RangeResponse {
    status: Status (id: 0, required);

    // kvs is the list of key-value pairs matched by the range request.
    // kvs is empty when count is requested.
    kvs: [KeyValue] (id: 1);

    // more indicates if there are more keys to return in the requested range.
    more: bool (id: 2);

    // count is set to the number of keys within the range when requested.
    count: int64 (id: 3);
}

table PutRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // key is the key, in bytes, to put into the key-value store.
    key: [ubyte] (id: 1);

    // value is the value, in bytes, to associate with the key in the key-value store.
    value: [ubyte] (id: 2);
}

table PutResponse {
    status: Status (id: 0, required);
}

table DeleteRangeRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // key is the first key to delete in the range.
    key: [ubyte] (id: 1);

    // range_end is the key following the last key to delete for the range [key, range_end).
    // If range_end is not given, the range is defined to contain only the key argument.
    // If range_end is one bit larger than the given key, then the range is all the keys
    // with the prefix (the given key).
    // If range_end is '\0', the range is all keys greater than or equal to the key argument.
    range_end: [ubyte] (id: 2);
}

table DeleteRangeResponse {
    status: Status (id: 0, required);

    // deleted is the number of keys deleted by the delete range request.
    deleted: int64 (id: 1);
}

// As vectors of unions are not yet supported in rust, we use a struct to wrap the union like
// `union RequestOp {RangeRequest, PutRequest, DeleteRangeRequest, TxnRequest}`
enum RequestOpType: ubyte { RANGE = 0, PUT = 1, DELETE_RANGE = 2, TXN = 3 }
table RequestOp {
    type: RequestOpType (id: 0);
    range_request: RangeRequest (id: 1);
    put_request: PutRequest (id: 2);
    delete_range_request: DeleteRangeRequest (id: 3);
    txn_request: TxnRequest (id: 4);
}

// As vectors of unions are not yet supported in rust, we use a struct to wrap the union like
// `union ResponseOp {RangeResponse, PutResponse, DeleteRangeResponse, TxnResponse}`
enum ResponseOpType: ubyte { RANGE = 0, PUT = 1, DELETE_RANGE = 2, TXN = 3 }
table ResponseOp {
    type: ResponseOpType (id: 0);
    range_response: RangeResponse (id: 1);
    put_response: PutResponse (id: 2);
    delete_range_response: DeleteRangeResponse (id: 3);
    txn_response: TxnResponse (id: 4);
}

enum CompareResult: ubyte { EQUAL = 0, GREATER = 1, LESS = 2, NOT_EQUAL = 3 }

enum CompareTarget: ubyte { VALUE = 0 }

union CompareTargetUnion {CompareTargetValue}

table CompareTargetValue {
    // value is the value of the given key, in bytes.
    value: [ubyte] (id: 0);
}

table Compare {
    // result is logical comparison operation for this comparison.
    result: CompareResult (id: 0);

    // target is the key-value field to inspect for the comparison.
    target: CompareTarget (id: 1);

    // key is the subject key for the comparison operation.
    key: [ubyte] (id: 2);

    target_union: CompareTargetUnion (id: 4);
}

table TxnRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    // compare is a list of predicates representing a conjunction of terms.
    // If the comparisons succeed, then the success requests will be processed in order,
    // and the response will contain their respective responses in order.
    // If the comparisons fail, then the failure requests will be processed in order,
    // and the response will contain their respective responses in order.
    compare: [Compare] (id: 1);

    // success is a list of requests which will be applied when compare evaluates to true.
    success: [RequestOp] (id: 2);

    // failure is a list of requests which will be applied when compare evaluates to false.
    failure: [RequestOp] (id: 3);
}

table TxnResponse {
    status: Status (id: 0, required);

    // succeeded is set to true if the compare evaluated to true or false otherwise.
    succeeded: bool (id: 1);

    // responses is a list of responses corresponding to the results from applying
    // success if succeeded is true or failure if succeeded is false.
    responses: [ResponseOp] (id: 2);
}

table ReportRangeProgressRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: int32 (id: 0);

    range_server: RangeServer (id: 1, required);

    range_progress: [RangeProgress] (id: 2, required);
}

table RangeProgress {
    stream_id: int64 (id: 0);

    range_index: int32 (id: 1);

    confirm_offset: int64 (id: 2);
}

table ReportRangeProgressResponse {
    status: Status (id: 0, required);

    throttle_time_ms: int32 (id: 1);
}

table UpdateStreamEpochRequest {
    timeout_ms: int32 (id: 0);

    stream_id: int64  = -1 (id: 1);

    epoch: int64 = -1 (id: 2);
}

table UpdateStreamEpochResponse {
    status: Status (id: 0, required);

    throttle_time_ms: int32 (id: 1);
}
